Terminals which are not used

   FOR
   GTEQ
   OROR
   ABS


Grammar

    0 $accept: Program $end

    1 Program: Proc Procs

    2 Proc: PROCEDURE VARNAME LEFT_PAREN ParameterListOrNot RIGHT_PAREN RET Primitive LEFT_BRACE Structure RIGHT_BRACE

    3 ParameterListOrNot: TypedParamList
    4                   | /* empty */

    5 TypedParamList: Paramlist COLON Primitive
    6               | Paramlist COLON Primitive SEMI_COLON TypedParamList

    7 Paramlist: Paramlist COMMA VARNAME
    8          | VARNAME

    9 Return: RET Expr SEMI_COLON

   10 Structure: Procs VarDecs Statements Return
   11          | Procs VarDecs Return

   12 Procs: Procs Proc
   13      | /* empty */

   14 VarDecs: VarDecs VarDec
   15        | /* empty */

   16 VarDec: VAR VAR_DEC_LHS COLON StringType SEMI_COLON

   17 VAR_DEC_LHS: VARNAME COMMA VAR_DEC_LHS
   18            | VARNAME

   19 Statements: Statements Statement
   20           | Statement

   21 Statement: VARNAME ArrayIndex EQ Expr SEMI_COLON
   22          | VARNAME EQ STRING SEMI_COLON
   23          | VARNAME EQ Expr SEMI_COLON
   24          | VARNAME EQ VARNAME LEFT_PAREN FuncCall RIGHT_PAREN SEMI_COLON
   25          | VARNAME EQ VARNAME LEFT_PAREN RIGHT_PAREN SEMI_COLON
   26          | XOR VARNAME EQ Expr SEMI_COLON
   27          | IF_WHILE
   28          | CodeBlock

   29 FuncCall: Expr COMMA FuncCall
   30         | Expr

   31 IF_WHILE: IF LEFT_PAREN Expr RIGHT_PAREN CodeBlock ELSE CodeBlock
   32         | IF LEFT_PAREN Expr RIGHT_PAREN CodeBlock
   33         | WHILE LEFT_PAREN Expr RIGHT_PAREN CodeBlock

   34 CodeBlock: LEFT_BRACE VarDecs Statements RIGHT_BRACE
   35          | LEFT_BRACE RIGHT_BRACE

   36 StringType: Primitive
   37           | _STRING LEFT_BRACKET INT RIGHT_BRACKET

   38 Primitive: _INT
   39          | _CHAR
   40          | _CHARPTR
   41          | _INTPTR
   42          | _BOOL

   43 ArrayIndex: LEFT_BRACKET Expr RIGHT_BRACKET

   44 Expr: Value
   45     | Expr EQEQ Expr
   46     | Expr GT Expr
   47     | Expr LT Expr
   48     | Expr LTEQ Expr
   49     | Expr OR Expr
   50     | Expr NE Expr
   51     | Expr ANDAND Expr
   52     | Expr PLUS Expr
   53     | Expr MINUS Expr
   54     | Expr MULT Expr
   55     | Expr DIV Expr
   56     | PIPE Expr PIPE
   57     | XOR LEFT_PAREN Expr RIGHT_PAREN
   58     | NOT Expr
   59     | MINUS Expr
   60     | LEFT_PAREN Expr RIGHT_PAREN

   61 Value: VARNAME
   62      | AND VARNAME ArrayIndex
   63      | AND VARNAME
   64      | INT
   65      | CHAR
   66      | TRUE
   67      | FALSE
   68      | NULLTOKEN
   69      | XOR VARNAME
   70      | VARNAME LEFT_BRACKET Expr RIGHT_BRACKET


Terminals, with rules where they appear

$end (0) 0
error (256)
PROCEDURE (258) 2
ELSE (259) 31
IF (260) 31 32
FOR (261)
VAR (262) 16
RET (263) 2 9
WHILE (264) 33
EQEQ (265) 45
GT (266) 46
GTEQ (267)
LT (268) 47
LTEQ (269) 48
NE (270) 50
ANDAND (271) 51
OROR (272)
NOT (273) 58
PLUS (274) 52
MINUS (275) 53 59
MULT (276) 54
DIV (277) 55
AND (278) 62 63
XOR (279) 26 57 69
OR (280) 49
PIPE (281) 56
_INTPTR (282) 41
_CHARPTR (283) 40
_BOOL (284) 42
_INT (285) 38
_CHAR (286) 39
_STRING (287) 37
TRUE (288) 66
FALSE (289) 67
NULLTOKEN (290) 68
VARNAME (291) 2 7 8 17 18 21 22 23 24 25 26 61 62 63 69 70
INT (292) 37 64
CHAR (293) 65
STRING (294) 22
SEMI_COLON (295) 6 9 16 21 22 23 24 25 26
COLON (296) 5 6 16
COMMA (297) 7 17 29
ABS (298)
LEFT_BRACE (299) 2 34 35
RIGHT_BRACE (300) 2 34 35
LEFT_PAREN (301) 2 24 25 31 32 33 57 60
RIGHT_PAREN (302) 2 24 25 31 32 33 57 60
LEFT_BRACKET (303) 37 43 70
RIGHT_BRACKET (304) 37 43 70
EQ (305) 21 22 23 24 25 26


Nonterminals, with rules where they appear

$accept (51)
    on left: 0
Program (52)
    on left: 1, on right: 0
Proc (53)
    on left: 2, on right: 1 12
ParameterListOrNot (54)
    on left: 3 4, on right: 2
TypedParamList (55)
    on left: 5 6, on right: 3 6
Paramlist (56)
    on left: 7 8, on right: 5 6 7
Return (57)
    on left: 9, on right: 10 11
Structure (58)
    on left: 10 11, on right: 2
Procs (59)
    on left: 12 13, on right: 1 10 11 12
VarDecs (60)
    on left: 14 15, on right: 10 11 14 34
VarDec (61)
    on left: 16, on right: 14
VAR_DEC_LHS (62)
    on left: 17 18, on right: 16 17
Statements (63)
    on left: 19 20, on right: 10 19 34
Statement (64)
    on left: 21 22 23 24 25 26 27 28, on right: 19 20
FuncCall (65)
    on left: 29 30, on right: 24 29
IF_WHILE (66)
    on left: 31 32 33, on right: 27
CodeBlock (67)
    on left: 34 35, on right: 28 31 32 33
StringType (68)
    on left: 36 37, on right: 16
Primitive (69)
    on left: 38 39 40 41 42, on right: 2 5 6 36
ArrayIndex (70)
    on left: 43, on right: 21 62
Expr (71)
    on left: 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60,
    on right: 9 21 23 26 29 30 31 32 33 43 45 46 47 48 49 50 51 52
    53 54 55 56 57 58 59 60 70
Value (72)
    on left: 61 62 63 64 65 66 67 68 69 70, on right: 44


state 0

    0 $accept: . Program $end

    PROCEDURE  shift, and go to state 1

    Program  go to state 2
    Proc     go to state 3


state 1

    2 Proc: PROCEDURE . VARNAME LEFT_PAREN ParameterListOrNot RIGHT_PAREN RET Primitive LEFT_BRACE Structure RIGHT_BRACE

    VARNAME  shift, and go to state 4


state 2

    0 $accept: Program . $end

    $end  shift, and go to state 5


state 3

    1 Program: Proc . Procs

    $default  reduce using rule 13 (Procs)

    Procs  go to state 6


state 4

    2 Proc: PROCEDURE VARNAME . LEFT_PAREN ParameterListOrNot RIGHT_PAREN RET Primitive LEFT_BRACE Structure RIGHT_BRACE

    LEFT_PAREN  shift, and go to state 7


state 5

    0 $accept: Program $end .

    $default  accept


state 6

    1 Program: Proc Procs .
   12 Procs: Procs . Proc

    PROCEDURE  shift, and go to state 1

    $default  reduce using rule 1 (Program)

    Proc  go to state 8


state 7

    2 Proc: PROCEDURE VARNAME LEFT_PAREN . ParameterListOrNot RIGHT_PAREN RET Primitive LEFT_BRACE Structure RIGHT_BRACE

    VARNAME  shift, and go to state 9

    $default  reduce using rule 4 (ParameterListOrNot)

    ParameterListOrNot  go to state 10
    TypedParamList      go to state 11
    Paramlist           go to state 12


state 8

   12 Procs: Procs Proc .

    $default  reduce using rule 12 (Procs)


state 9

    8 Paramlist: VARNAME .

    $default  reduce using rule 8 (Paramlist)


state 10

    2 Proc: PROCEDURE VARNAME LEFT_PAREN ParameterListOrNot . RIGHT_PAREN RET Primitive LEFT_BRACE Structure RIGHT_BRACE

    RIGHT_PAREN  shift, and go to state 13


state 11

    3 ParameterListOrNot: TypedParamList .

    $default  reduce using rule 3 (ParameterListOrNot)


state 12

    5 TypedParamList: Paramlist . COLON Primitive
    6               | Paramlist . COLON Primitive SEMI_COLON TypedParamList
    7 Paramlist: Paramlist . COMMA VARNAME

    COLON  shift, and go to state 14
    COMMA  shift, and go to state 15


state 13

    2 Proc: PROCEDURE VARNAME LEFT_PAREN ParameterListOrNot RIGHT_PAREN . RET Primitive LEFT_BRACE Structure RIGHT_BRACE

    RET  shift, and go to state 16


state 14

    5 TypedParamList: Paramlist COLON . Primitive
    6               | Paramlist COLON . Primitive SEMI_COLON TypedParamList

    _INTPTR   shift, and go to state 17
    _CHARPTR  shift, and go to state 18
    _BOOL     shift, and go to state 19
    _INT      shift, and go to state 20
    _CHAR     shift, and go to state 21

    Primitive  go to state 22


state 15

    7 Paramlist: Paramlist COMMA . VARNAME

    VARNAME  shift, and go to state 23


state 16

    2 Proc: PROCEDURE VARNAME LEFT_PAREN ParameterListOrNot RIGHT_PAREN RET . Primitive LEFT_BRACE Structure RIGHT_BRACE

    _INTPTR   shift, and go to state 17
    _CHARPTR  shift, and go to state 18
    _BOOL     shift, and go to state 19
    _INT      shift, and go to state 20
    _CHAR     shift, and go to state 21

    Primitive  go to state 24


state 17

   41 Primitive: _INTPTR .

    $default  reduce using rule 41 (Primitive)


state 18

   40 Primitive: _CHARPTR .

    $default  reduce using rule 40 (Primitive)


state 19

   42 Primitive: _BOOL .

    $default  reduce using rule 42 (Primitive)


state 20

   38 Primitive: _INT .

    $default  reduce using rule 38 (Primitive)


state 21

   39 Primitive: _CHAR .

    $default  reduce using rule 39 (Primitive)


state 22

    5 TypedParamList: Paramlist COLON Primitive .
    6               | Paramlist COLON Primitive . SEMI_COLON TypedParamList

    SEMI_COLON  shift, and go to state 25

    $default  reduce using rule 5 (TypedParamList)


state 23

    7 Paramlist: Paramlist COMMA VARNAME .

    $default  reduce using rule 7 (Paramlist)


state 24

    2 Proc: PROCEDURE VARNAME LEFT_PAREN ParameterListOrNot RIGHT_PAREN RET Primitive . LEFT_BRACE Structure RIGHT_BRACE

    LEFT_BRACE  shift, and go to state 26


state 25

    6 TypedParamList: Paramlist COLON Primitive SEMI_COLON . TypedParamList

    VARNAME  shift, and go to state 9

    TypedParamList  go to state 27
    Paramlist       go to state 12


state 26

    2 Proc: PROCEDURE VARNAME LEFT_PAREN ParameterListOrNot RIGHT_PAREN RET Primitive LEFT_BRACE . Structure RIGHT_BRACE

    $default  reduce using rule 13 (Procs)

    Structure  go to state 28
    Procs      go to state 29


state 27

    6 TypedParamList: Paramlist COLON Primitive SEMI_COLON TypedParamList .

    $default  reduce using rule 6 (TypedParamList)


state 28

    2 Proc: PROCEDURE VARNAME LEFT_PAREN ParameterListOrNot RIGHT_PAREN RET Primitive LEFT_BRACE Structure . RIGHT_BRACE

    RIGHT_BRACE  shift, and go to state 30


state 29

   10 Structure: Procs . VarDecs Statements Return
   11          | Procs . VarDecs Return
   12 Procs: Procs . Proc

    PROCEDURE  shift, and go to state 1

    $default  reduce using rule 15 (VarDecs)

    Proc     go to state 8
    VarDecs  go to state 31


state 30

    2 Proc: PROCEDURE VARNAME LEFT_PAREN ParameterListOrNot RIGHT_PAREN RET Primitive LEFT_BRACE Structure RIGHT_BRACE .

    $default  reduce using rule 2 (Proc)


state 31

   10 Structure: Procs VarDecs . Statements Return
   11          | Procs VarDecs . Return
   14 VarDecs: VarDecs . VarDec

    IF          shift, and go to state 32
    VAR         shift, and go to state 33
    RET         shift, and go to state 34
    WHILE       shift, and go to state 35
    XOR         shift, and go to state 36
    VARNAME     shift, and go to state 37
    LEFT_BRACE  shift, and go to state 38

    Return      go to state 39
    VarDec      go to state 40
    Statements  go to state 41
    Statement   go to state 42
    IF_WHILE    go to state 43
    CodeBlock   go to state 44


state 32

   31 IF_WHILE: IF . LEFT_PAREN Expr RIGHT_PAREN CodeBlock ELSE CodeBlock
   32         | IF . LEFT_PAREN Expr RIGHT_PAREN CodeBlock

    LEFT_PAREN  shift, and go to state 45


state 33

   16 VarDec: VAR . VAR_DEC_LHS COLON StringType SEMI_COLON

    VARNAME  shift, and go to state 46

    VAR_DEC_LHS  go to state 47


state 34

    9 Return: RET . Expr SEMI_COLON

    NOT         shift, and go to state 48
    MINUS       shift, and go to state 49
    AND         shift, and go to state 50
    XOR         shift, and go to state 51
    PIPE        shift, and go to state 52
    TRUE        shift, and go to state 53
    FALSE       shift, and go to state 54
    NULLTOKEN   shift, and go to state 55
    VARNAME     shift, and go to state 56
    INT         shift, and go to state 57
    CHAR        shift, and go to state 58
    LEFT_PAREN  shift, and go to state 59

    Expr   go to state 60
    Value  go to state 61


state 35

   33 IF_WHILE: WHILE . LEFT_PAREN Expr RIGHT_PAREN CodeBlock

    LEFT_PAREN  shift, and go to state 62


state 36

   26 Statement: XOR . VARNAME EQ Expr SEMI_COLON

    VARNAME  shift, and go to state 63


state 37

   21 Statement: VARNAME . ArrayIndex EQ Expr SEMI_COLON
   22          | VARNAME . EQ STRING SEMI_COLON
   23          | VARNAME . EQ Expr SEMI_COLON
   24          | VARNAME . EQ VARNAME LEFT_PAREN FuncCall RIGHT_PAREN SEMI_COLON
   25          | VARNAME . EQ VARNAME LEFT_PAREN RIGHT_PAREN SEMI_COLON

    LEFT_BRACKET  shift, and go to state 64
    EQ            shift, and go to state 65

    ArrayIndex  go to state 66


state 38

   34 CodeBlock: LEFT_BRACE . VarDecs Statements RIGHT_BRACE
   35          | LEFT_BRACE . RIGHT_BRACE

    RIGHT_BRACE  shift, and go to state 67

    $default  reduce using rule 15 (VarDecs)

    VarDecs  go to state 68


state 39

   11 Structure: Procs VarDecs Return .

    $default  reduce using rule 11 (Structure)


state 40

   14 VarDecs: VarDecs VarDec .

    $default  reduce using rule 14 (VarDecs)


state 41

   10 Structure: Procs VarDecs Statements . Return
   19 Statements: Statements . Statement

    IF          shift, and go to state 32
    RET         shift, and go to state 34
    WHILE       shift, and go to state 35
    XOR         shift, and go to state 36
    VARNAME     shift, and go to state 37
    LEFT_BRACE  shift, and go to state 38

    Return     go to state 69
    Statement  go to state 70
    IF_WHILE   go to state 43
    CodeBlock  go to state 44


state 42

   20 Statements: Statement .

    $default  reduce using rule 20 (Statements)


state 43

   27 Statement: IF_WHILE .

    $default  reduce using rule 27 (Statement)


state 44

   28 Statement: CodeBlock .

    $default  reduce using rule 28 (Statement)


state 45

   31 IF_WHILE: IF LEFT_PAREN . Expr RIGHT_PAREN CodeBlock ELSE CodeBlock
   32         | IF LEFT_PAREN . Expr RIGHT_PAREN CodeBlock

    NOT         shift, and go to state 48
    MINUS       shift, and go to state 49
    AND         shift, and go to state 50
    XOR         shift, and go to state 51
    PIPE        shift, and go to state 52
    TRUE        shift, and go to state 53
    FALSE       shift, and go to state 54
    NULLTOKEN   shift, and go to state 55
    VARNAME     shift, and go to state 56
    INT         shift, and go to state 57
    CHAR        shift, and go to state 58
    LEFT_PAREN  shift, and go to state 59

    Expr   go to state 71
    Value  go to state 61


state 46

   17 VAR_DEC_LHS: VARNAME . COMMA VAR_DEC_LHS
   18            | VARNAME .

    COMMA  shift, and go to state 72

    $default  reduce using rule 18 (VAR_DEC_LHS)


state 47

   16 VarDec: VAR VAR_DEC_LHS . COLON StringType SEMI_COLON

    COLON  shift, and go to state 73


state 48

   58 Expr: NOT . Expr

    NOT         shift, and go to state 48
    MINUS       shift, and go to state 49
    AND         shift, and go to state 50
    XOR         shift, and go to state 51
    PIPE        shift, and go to state 52
    TRUE        shift, and go to state 53
    FALSE       shift, and go to state 54
    NULLTOKEN   shift, and go to state 55
    VARNAME     shift, and go to state 56
    INT         shift, and go to state 57
    CHAR        shift, and go to state 58
    LEFT_PAREN  shift, and go to state 59

    Expr   go to state 74
    Value  go to state 61


state 49

   59 Expr: MINUS . Expr

    NOT         shift, and go to state 48
    MINUS       shift, and go to state 49
    AND         shift, and go to state 50
    XOR         shift, and go to state 51
    PIPE        shift, and go to state 52
    TRUE        shift, and go to state 53
    FALSE       shift, and go to state 54
    NULLTOKEN   shift, and go to state 55
    VARNAME     shift, and go to state 56
    INT         shift, and go to state 57
    CHAR        shift, and go to state 58
    LEFT_PAREN  shift, and go to state 59

    Expr   go to state 75
    Value  go to state 61


state 50

   62 Value: AND . VARNAME ArrayIndex
   63      | AND . VARNAME

    VARNAME  shift, and go to state 76


state 51

   57 Expr: XOR . LEFT_PAREN Expr RIGHT_PAREN
   69 Value: XOR . VARNAME

    VARNAME     shift, and go to state 77
    LEFT_PAREN  shift, and go to state 78


state 52

   56 Expr: PIPE . Expr PIPE

    NOT         shift, and go to state 48
    MINUS       shift, and go to state 49
    AND         shift, and go to state 50
    XOR         shift, and go to state 51
    PIPE        shift, and go to state 52
    TRUE        shift, and go to state 53
    FALSE       shift, and go to state 54
    NULLTOKEN   shift, and go to state 55
    VARNAME     shift, and go to state 56
    INT         shift, and go to state 57
    CHAR        shift, and go to state 58
    LEFT_PAREN  shift, and go to state 59

    Expr   go to state 79
    Value  go to state 61


state 53

   66 Value: TRUE .

    $default  reduce using rule 66 (Value)


state 54

   67 Value: FALSE .

    $default  reduce using rule 67 (Value)


state 55

   68 Value: NULLTOKEN .

    $default  reduce using rule 68 (Value)


state 56

   61 Value: VARNAME .
   70      | VARNAME . LEFT_BRACKET Expr RIGHT_BRACKET

    LEFT_BRACKET  shift, and go to state 80

    $default  reduce using rule 61 (Value)


state 57

   64 Value: INT .

    $default  reduce using rule 64 (Value)


state 58

   65 Value: CHAR .

    $default  reduce using rule 65 (Value)


state 59

   60 Expr: LEFT_PAREN . Expr RIGHT_PAREN

    NOT         shift, and go to state 48
    MINUS       shift, and go to state 49
    AND         shift, and go to state 50
    XOR         shift, and go to state 51
    PIPE        shift, and go to state 52
    TRUE        shift, and go to state 53
    FALSE       shift, and go to state 54
    NULLTOKEN   shift, and go to state 55
    VARNAME     shift, and go to state 56
    INT         shift, and go to state 57
    CHAR        shift, and go to state 58
    LEFT_PAREN  shift, and go to state 59

    Expr   go to state 81
    Value  go to state 61


state 60

    9 Return: RET Expr . SEMI_COLON
   45 Expr: Expr . EQEQ Expr
   46     | Expr . GT Expr
   47     | Expr . LT Expr
   48     | Expr . LTEQ Expr
   49     | Expr . OR Expr
   50     | Expr . NE Expr
   51     | Expr . ANDAND Expr
   52     | Expr . PLUS Expr
   53     | Expr . MINUS Expr
   54     | Expr . MULT Expr
   55     | Expr . DIV Expr

    EQEQ        shift, and go to state 82
    GT          shift, and go to state 83
    LT          shift, and go to state 84
    LTEQ        shift, and go to state 85
    NE          shift, and go to state 86
    ANDAND      shift, and go to state 87
    PLUS        shift, and go to state 88
    MINUS       shift, and go to state 89
    MULT        shift, and go to state 90
    DIV         shift, and go to state 91
    OR          shift, and go to state 92
    SEMI_COLON  shift, and go to state 93


state 61

   44 Expr: Value .

    $default  reduce using rule 44 (Expr)


state 62

   33 IF_WHILE: WHILE LEFT_PAREN . Expr RIGHT_PAREN CodeBlock

    NOT         shift, and go to state 48
    MINUS       shift, and go to state 49
    AND         shift, and go to state 50
    XOR         shift, and go to state 51
    PIPE        shift, and go to state 52
    TRUE        shift, and go to state 53
    FALSE       shift, and go to state 54
    NULLTOKEN   shift, and go to state 55
    VARNAME     shift, and go to state 56
    INT         shift, and go to state 57
    CHAR        shift, and go to state 58
    LEFT_PAREN  shift, and go to state 59

    Expr   go to state 94
    Value  go to state 61


state 63

   26 Statement: XOR VARNAME . EQ Expr SEMI_COLON

    EQ  shift, and go to state 95


state 64

   43 ArrayIndex: LEFT_BRACKET . Expr RIGHT_BRACKET

    NOT         shift, and go to state 48
    MINUS       shift, and go to state 49
    AND         shift, and go to state 50
    XOR         shift, and go to state 51
    PIPE        shift, and go to state 52
    TRUE        shift, and go to state 53
    FALSE       shift, and go to state 54
    NULLTOKEN   shift, and go to state 55
    VARNAME     shift, and go to state 56
    INT         shift, and go to state 57
    CHAR        shift, and go to state 58
    LEFT_PAREN  shift, and go to state 59

    Expr   go to state 96
    Value  go to state 61


state 65

   22 Statement: VARNAME EQ . STRING SEMI_COLON
   23          | VARNAME EQ . Expr SEMI_COLON
   24          | VARNAME EQ . VARNAME LEFT_PAREN FuncCall RIGHT_PAREN SEMI_COLON
   25          | VARNAME EQ . VARNAME LEFT_PAREN RIGHT_PAREN SEMI_COLON

    NOT         shift, and go to state 48
    MINUS       shift, and go to state 49
    AND         shift, and go to state 50
    XOR         shift, and go to state 51
    PIPE        shift, and go to state 52
    TRUE        shift, and go to state 53
    FALSE       shift, and go to state 54
    NULLTOKEN   shift, and go to state 55
    VARNAME     shift, and go to state 97
    INT         shift, and go to state 57
    CHAR        shift, and go to state 58
    STRING      shift, and go to state 98
    LEFT_PAREN  shift, and go to state 59

    Expr   go to state 99
    Value  go to state 61


state 66

   21 Statement: VARNAME ArrayIndex . EQ Expr SEMI_COLON

    EQ  shift, and go to state 100


state 67

   35 CodeBlock: LEFT_BRACE RIGHT_BRACE .

    $default  reduce using rule 35 (CodeBlock)


state 68

   14 VarDecs: VarDecs . VarDec
   34 CodeBlock: LEFT_BRACE VarDecs . Statements RIGHT_BRACE

    IF          shift, and go to state 32
    VAR         shift, and go to state 33
    WHILE       shift, and go to state 35
    XOR         shift, and go to state 36
    VARNAME     shift, and go to state 37
    LEFT_BRACE  shift, and go to state 38

    VarDec      go to state 40
    Statements  go to state 101
    Statement   go to state 42
    IF_WHILE    go to state 43
    CodeBlock   go to state 44


state 69

   10 Structure: Procs VarDecs Statements Return .

    $default  reduce using rule 10 (Structure)


state 70

   19 Statements: Statements Statement .

    $default  reduce using rule 19 (Statements)


state 71

   31 IF_WHILE: IF LEFT_PAREN Expr . RIGHT_PAREN CodeBlock ELSE CodeBlock
   32         | IF LEFT_PAREN Expr . RIGHT_PAREN CodeBlock
   45 Expr: Expr . EQEQ Expr
   46     | Expr . GT Expr
   47     | Expr . LT Expr
   48     | Expr . LTEQ Expr
   49     | Expr . OR Expr
   50     | Expr . NE Expr
   51     | Expr . ANDAND Expr
   52     | Expr . PLUS Expr
   53     | Expr . MINUS Expr
   54     | Expr . MULT Expr
   55     | Expr . DIV Expr

    EQEQ         shift, and go to state 82
    GT           shift, and go to state 83
    LT           shift, and go to state 84
    LTEQ         shift, and go to state 85
    NE           shift, and go to state 86
    ANDAND       shift, and go to state 87
    PLUS         shift, and go to state 88
    MINUS        shift, and go to state 89
    MULT         shift, and go to state 90
    DIV          shift, and go to state 91
    OR           shift, and go to state 92
    RIGHT_PAREN  shift, and go to state 102


state 72

   17 VAR_DEC_LHS: VARNAME COMMA . VAR_DEC_LHS

    VARNAME  shift, and go to state 46

    VAR_DEC_LHS  go to state 103


state 73

   16 VarDec: VAR VAR_DEC_LHS COLON . StringType SEMI_COLON

    _INTPTR   shift, and go to state 17
    _CHARPTR  shift, and go to state 18
    _BOOL     shift, and go to state 19
    _INT      shift, and go to state 20
    _CHAR     shift, and go to state 21
    _STRING   shift, and go to state 104

    StringType  go to state 105
    Primitive   go to state 106


state 74

   45 Expr: Expr . EQEQ Expr
   46     | Expr . GT Expr
   47     | Expr . LT Expr
   48     | Expr . LTEQ Expr
   49     | Expr . OR Expr
   50     | Expr . NE Expr
   51     | Expr . ANDAND Expr
   52     | Expr . PLUS Expr
   53     | Expr . MINUS Expr
   54     | Expr . MULT Expr
   55     | Expr . DIV Expr
   58     | NOT Expr .

    OR  shift, and go to state 92

    $default  reduce using rule 58 (Expr)


state 75

   45 Expr: Expr . EQEQ Expr
   46     | Expr . GT Expr
   47     | Expr . LT Expr
   48     | Expr . LTEQ Expr
   49     | Expr . OR Expr
   50     | Expr . NE Expr
   51     | Expr . ANDAND Expr
   52     | Expr . PLUS Expr
   53     | Expr . MINUS Expr
   54     | Expr . MULT Expr
   55     | Expr . DIV Expr
   59     | MINUS Expr .

    MULT  shift, and go to state 90
    DIV   shift, and go to state 91
    OR    shift, and go to state 92

    $default  reduce using rule 59 (Expr)


state 76

   62 Value: AND VARNAME . ArrayIndex
   63      | AND VARNAME .

    LEFT_BRACKET  shift, and go to state 64

    $default  reduce using rule 63 (Value)

    ArrayIndex  go to state 107


state 77

   69 Value: XOR VARNAME .

    $default  reduce using rule 69 (Value)


state 78

   57 Expr: XOR LEFT_PAREN . Expr RIGHT_PAREN

    NOT         shift, and go to state 48
    MINUS       shift, and go to state 49
    AND         shift, and go to state 50
    XOR         shift, and go to state 51
    PIPE        shift, and go to state 52
    TRUE        shift, and go to state 53
    FALSE       shift, and go to state 54
    NULLTOKEN   shift, and go to state 55
    VARNAME     shift, and go to state 56
    INT         shift, and go to state 57
    CHAR        shift, and go to state 58
    LEFT_PAREN  shift, and go to state 59

    Expr   go to state 108
    Value  go to state 61


state 79

   45 Expr: Expr . EQEQ Expr
   46     | Expr . GT Expr
   47     | Expr . LT Expr
   48     | Expr . LTEQ Expr
   49     | Expr . OR Expr
   50     | Expr . NE Expr
   51     | Expr . ANDAND Expr
   52     | Expr . PLUS Expr
   53     | Expr . MINUS Expr
   54     | Expr . MULT Expr
   55     | Expr . DIV Expr
   56     | PIPE Expr . PIPE

    EQEQ    shift, and go to state 82
    GT      shift, and go to state 83
    LT      shift, and go to state 84
    LTEQ    shift, and go to state 85
    NE      shift, and go to state 86
    ANDAND  shift, and go to state 87
    PLUS    shift, and go to state 88
    MINUS   shift, and go to state 89
    MULT    shift, and go to state 90
    DIV     shift, and go to state 91
    OR      shift, and go to state 92
    PIPE    shift, and go to state 109


state 80

   70 Value: VARNAME LEFT_BRACKET . Expr RIGHT_BRACKET

    NOT         shift, and go to state 48
    MINUS       shift, and go to state 49
    AND         shift, and go to state 50
    XOR         shift, and go to state 51
    PIPE        shift, and go to state 52
    TRUE        shift, and go to state 53
    FALSE       shift, and go to state 54
    NULLTOKEN   shift, and go to state 55
    VARNAME     shift, and go to state 56
    INT         shift, and go to state 57
    CHAR        shift, and go to state 58
    LEFT_PAREN  shift, and go to state 59

    Expr   go to state 110
    Value  go to state 61


state 81

   45 Expr: Expr . EQEQ Expr
   46     | Expr . GT Expr
   47     | Expr . LT Expr
   48     | Expr . LTEQ Expr
   49     | Expr . OR Expr
   50     | Expr . NE Expr
   51     | Expr . ANDAND Expr
   52     | Expr . PLUS Expr
   53     | Expr . MINUS Expr
   54     | Expr . MULT Expr
   55     | Expr . DIV Expr
   60     | LEFT_PAREN Expr . RIGHT_PAREN

    EQEQ         shift, and go to state 82
    GT           shift, and go to state 83
    LT           shift, and go to state 84
    LTEQ         shift, and go to state 85
    NE           shift, and go to state 86
    ANDAND       shift, and go to state 87
    PLUS         shift, and go to state 88
    MINUS        shift, and go to state 89
    MULT         shift, and go to state 90
    DIV          shift, and go to state 91
    OR           shift, and go to state 92
    RIGHT_PAREN  shift, and go to state 111


state 82

   45 Expr: Expr EQEQ . Expr

    NOT         shift, and go to state 48
    MINUS       shift, and go to state 49
    AND         shift, and go to state 50
    XOR         shift, and go to state 51
    PIPE        shift, and go to state 52
    TRUE        shift, and go to state 53
    FALSE       shift, and go to state 54
    NULLTOKEN   shift, and go to state 55
    VARNAME     shift, and go to state 56
    INT         shift, and go to state 57
    CHAR        shift, and go to state 58
    LEFT_PAREN  shift, and go to state 59

    Expr   go to state 112
    Value  go to state 61


state 83

   46 Expr: Expr GT . Expr

    NOT         shift, and go to state 48
    MINUS       shift, and go to state 49
    AND         shift, and go to state 50
    XOR         shift, and go to state 51
    PIPE        shift, and go to state 52
    TRUE        shift, and go to state 53
    FALSE       shift, and go to state 54
    NULLTOKEN   shift, and go to state 55
    VARNAME     shift, and go to state 56
    INT         shift, and go to state 57
    CHAR        shift, and go to state 58
    LEFT_PAREN  shift, and go to state 59

    Expr   go to state 113
    Value  go to state 61


state 84

   47 Expr: Expr LT . Expr

    NOT         shift, and go to state 48
    MINUS       shift, and go to state 49
    AND         shift, and go to state 50
    XOR         shift, and go to state 51
    PIPE        shift, and go to state 52
    TRUE        shift, and go to state 53
    FALSE       shift, and go to state 54
    NULLTOKEN   shift, and go to state 55
    VARNAME     shift, and go to state 56
    INT         shift, and go to state 57
    CHAR        shift, and go to state 58
    LEFT_PAREN  shift, and go to state 59

    Expr   go to state 114
    Value  go to state 61


state 85

   48 Expr: Expr LTEQ . Expr

    NOT         shift, and go to state 48
    MINUS       shift, and go to state 49
    AND         shift, and go to state 50
    XOR         shift, and go to state 51
    PIPE        shift, and go to state 52
    TRUE        shift, and go to state 53
    FALSE       shift, and go to state 54
    NULLTOKEN   shift, and go to state 55
    VARNAME     shift, and go to state 56
    INT         shift, and go to state 57
    CHAR        shift, and go to state 58
    LEFT_PAREN  shift, and go to state 59

    Expr   go to state 115
    Value  go to state 61


state 86

   50 Expr: Expr NE . Expr

    NOT         shift, and go to state 48
    MINUS       shift, and go to state 49
    AND         shift, and go to state 50
    XOR         shift, and go to state 51
    PIPE        shift, and go to state 52
    TRUE        shift, and go to state 53
    FALSE       shift, and go to state 54
    NULLTOKEN   shift, and go to state 55
    VARNAME     shift, and go to state 56
    INT         shift, and go to state 57
    CHAR        shift, and go to state 58
    LEFT_PAREN  shift, and go to state 59

    Expr   go to state 116
    Value  go to state 61


state 87

   51 Expr: Expr ANDAND . Expr

    NOT         shift, and go to state 48
    MINUS       shift, and go to state 49
    AND         shift, and go to state 50
    XOR         shift, and go to state 51
    PIPE        shift, and go to state 52
    TRUE        shift, and go to state 53
    FALSE       shift, and go to state 54
    NULLTOKEN   shift, and go to state 55
    VARNAME     shift, and go to state 56
    INT         shift, and go to state 57
    CHAR        shift, and go to state 58
    LEFT_PAREN  shift, and go to state 59

    Expr   go to state 117
    Value  go to state 61


state 88

   52 Expr: Expr PLUS . Expr

    NOT         shift, and go to state 48
    MINUS       shift, and go to state 49
    AND         shift, and go to state 50
    XOR         shift, and go to state 51
    PIPE        shift, and go to state 52
    TRUE        shift, and go to state 53
    FALSE       shift, and go to state 54
    NULLTOKEN   shift, and go to state 55
    VARNAME     shift, and go to state 56
    INT         shift, and go to state 57
    CHAR        shift, and go to state 58
    LEFT_PAREN  shift, and go to state 59

    Expr   go to state 118
    Value  go to state 61


state 89

   53 Expr: Expr MINUS . Expr

    NOT         shift, and go to state 48
    MINUS       shift, and go to state 49
    AND         shift, and go to state 50
    XOR         shift, and go to state 51
    PIPE        shift, and go to state 52
    TRUE        shift, and go to state 53
    FALSE       shift, and go to state 54
    NULLTOKEN   shift, and go to state 55
    VARNAME     shift, and go to state 56
    INT         shift, and go to state 57
    CHAR        shift, and go to state 58
    LEFT_PAREN  shift, and go to state 59

    Expr   go to state 119
    Value  go to state 61


state 90

   54 Expr: Expr MULT . Expr

    NOT         shift, and go to state 48
    MINUS       shift, and go to state 49
    AND         shift, and go to state 50
    XOR         shift, and go to state 51
    PIPE        shift, and go to state 52
    TRUE        shift, and go to state 53
    FALSE       shift, and go to state 54
    NULLTOKEN   shift, and go to state 55
    VARNAME     shift, and go to state 56
    INT         shift, and go to state 57
    CHAR        shift, and go to state 58
    LEFT_PAREN  shift, and go to state 59

    Expr   go to state 120
    Value  go to state 61


state 91

   55 Expr: Expr DIV . Expr

    NOT         shift, and go to state 48
    MINUS       shift, and go to state 49
    AND         shift, and go to state 50
    XOR         shift, and go to state 51
    PIPE        shift, and go to state 52
    TRUE        shift, and go to state 53
    FALSE       shift, and go to state 54
    NULLTOKEN   shift, and go to state 55
    VARNAME     shift, and go to state 56
    INT         shift, and go to state 57
    CHAR        shift, and go to state 58
    LEFT_PAREN  shift, and go to state 59

    Expr   go to state 121
    Value  go to state 61


state 92

   49 Expr: Expr OR . Expr

    NOT         shift, and go to state 48
    MINUS       shift, and go to state 49
    AND         shift, and go to state 50
    XOR         shift, and go to state 51
    PIPE        shift, and go to state 52
    TRUE        shift, and go to state 53
    FALSE       shift, and go to state 54
    NULLTOKEN   shift, and go to state 55
    VARNAME     shift, and go to state 56
    INT         shift, and go to state 57
    CHAR        shift, and go to state 58
    LEFT_PAREN  shift, and go to state 59

    Expr   go to state 122
    Value  go to state 61


state 93

    9 Return: RET Expr SEMI_COLON .

    $default  reduce using rule 9 (Return)


state 94

   33 IF_WHILE: WHILE LEFT_PAREN Expr . RIGHT_PAREN CodeBlock
   45 Expr: Expr . EQEQ Expr
   46     | Expr . GT Expr
   47     | Expr . LT Expr
   48     | Expr . LTEQ Expr
   49     | Expr . OR Expr
   50     | Expr . NE Expr
   51     | Expr . ANDAND Expr
   52     | Expr . PLUS Expr
   53     | Expr . MINUS Expr
   54     | Expr . MULT Expr
   55     | Expr . DIV Expr

    EQEQ         shift, and go to state 82
    GT           shift, and go to state 83
    LT           shift, and go to state 84
    LTEQ         shift, and go to state 85
    NE           shift, and go to state 86
    ANDAND       shift, and go to state 87
    PLUS         shift, and go to state 88
    MINUS        shift, and go to state 89
    MULT         shift, and go to state 90
    DIV          shift, and go to state 91
    OR           shift, and go to state 92
    RIGHT_PAREN  shift, and go to state 123


state 95

   26 Statement: XOR VARNAME EQ . Expr SEMI_COLON

    NOT         shift, and go to state 48
    MINUS       shift, and go to state 49
    AND         shift, and go to state 50
    XOR         shift, and go to state 51
    PIPE        shift, and go to state 52
    TRUE        shift, and go to state 53
    FALSE       shift, and go to state 54
    NULLTOKEN   shift, and go to state 55
    VARNAME     shift, and go to state 56
    INT         shift, and go to state 57
    CHAR        shift, and go to state 58
    LEFT_PAREN  shift, and go to state 59

    Expr   go to state 124
    Value  go to state 61


state 96

   43 ArrayIndex: LEFT_BRACKET Expr . RIGHT_BRACKET
   45 Expr: Expr . EQEQ Expr
   46     | Expr . GT Expr
   47     | Expr . LT Expr
   48     | Expr . LTEQ Expr
   49     | Expr . OR Expr
   50     | Expr . NE Expr
   51     | Expr . ANDAND Expr
   52     | Expr . PLUS Expr
   53     | Expr . MINUS Expr
   54     | Expr . MULT Expr
   55     | Expr . DIV Expr

    EQEQ           shift, and go to state 82
    GT             shift, and go to state 83
    LT             shift, and go to state 84
    LTEQ           shift, and go to state 85
    NE             shift, and go to state 86
    ANDAND         shift, and go to state 87
    PLUS           shift, and go to state 88
    MINUS          shift, and go to state 89
    MULT           shift, and go to state 90
    DIV            shift, and go to state 91
    OR             shift, and go to state 92
    RIGHT_BRACKET  shift, and go to state 125


state 97

   24 Statement: VARNAME EQ VARNAME . LEFT_PAREN FuncCall RIGHT_PAREN SEMI_COLON
   25          | VARNAME EQ VARNAME . LEFT_PAREN RIGHT_PAREN SEMI_COLON
   61 Value: VARNAME .
   70      | VARNAME . LEFT_BRACKET Expr RIGHT_BRACKET

    LEFT_PAREN    shift, and go to state 126
    LEFT_BRACKET  shift, and go to state 80

    $default  reduce using rule 61 (Value)


state 98

   22 Statement: VARNAME EQ STRING . SEMI_COLON

    SEMI_COLON  shift, and go to state 127


state 99

   23 Statement: VARNAME EQ Expr . SEMI_COLON
   45 Expr: Expr . EQEQ Expr
   46     | Expr . GT Expr
   47     | Expr . LT Expr
   48     | Expr . LTEQ Expr
   49     | Expr . OR Expr
   50     | Expr . NE Expr
   51     | Expr . ANDAND Expr
   52     | Expr . PLUS Expr
   53     | Expr . MINUS Expr
   54     | Expr . MULT Expr
   55     | Expr . DIV Expr

    EQEQ        shift, and go to state 82
    GT          shift, and go to state 83
    LT          shift, and go to state 84
    LTEQ        shift, and go to state 85
    NE          shift, and go to state 86
    ANDAND      shift, and go to state 87
    PLUS        shift, and go to state 88
    MINUS       shift, and go to state 89
    MULT        shift, and go to state 90
    DIV         shift, and go to state 91
    OR          shift, and go to state 92
    SEMI_COLON  shift, and go to state 128


state 100

   21 Statement: VARNAME ArrayIndex EQ . Expr SEMI_COLON

    NOT         shift, and go to state 48
    MINUS       shift, and go to state 49
    AND         shift, and go to state 50
    XOR         shift, and go to state 51
    PIPE        shift, and go to state 52
    TRUE        shift, and go to state 53
    FALSE       shift, and go to state 54
    NULLTOKEN   shift, and go to state 55
    VARNAME     shift, and go to state 56
    INT         shift, and go to state 57
    CHAR        shift, and go to state 58
    LEFT_PAREN  shift, and go to state 59

    Expr   go to state 129
    Value  go to state 61


state 101

   19 Statements: Statements . Statement
   34 CodeBlock: LEFT_BRACE VarDecs Statements . RIGHT_BRACE

    IF           shift, and go to state 32
    WHILE        shift, and go to state 35
    XOR          shift, and go to state 36
    VARNAME      shift, and go to state 37
    LEFT_BRACE   shift, and go to state 38
    RIGHT_BRACE  shift, and go to state 130

    Statement  go to state 70
    IF_WHILE   go to state 43
    CodeBlock  go to state 44


state 102

   31 IF_WHILE: IF LEFT_PAREN Expr RIGHT_PAREN . CodeBlock ELSE CodeBlock
   32         | IF LEFT_PAREN Expr RIGHT_PAREN . CodeBlock

    LEFT_BRACE  shift, and go to state 38

    CodeBlock  go to state 131


state 103

   17 VAR_DEC_LHS: VARNAME COMMA VAR_DEC_LHS .

    $default  reduce using rule 17 (VAR_DEC_LHS)


state 104

   37 StringType: _STRING . LEFT_BRACKET INT RIGHT_BRACKET

    LEFT_BRACKET  shift, and go to state 132


state 105

   16 VarDec: VAR VAR_DEC_LHS COLON StringType . SEMI_COLON

    SEMI_COLON  shift, and go to state 133


state 106

   36 StringType: Primitive .

    $default  reduce using rule 36 (StringType)


state 107

   62 Value: AND VARNAME ArrayIndex .

    $default  reduce using rule 62 (Value)


state 108

   45 Expr: Expr . EQEQ Expr
   46     | Expr . GT Expr
   47     | Expr . LT Expr
   48     | Expr . LTEQ Expr
   49     | Expr . OR Expr
   50     | Expr . NE Expr
   51     | Expr . ANDAND Expr
   52     | Expr . PLUS Expr
   53     | Expr . MINUS Expr
   54     | Expr . MULT Expr
   55     | Expr . DIV Expr
   57     | XOR LEFT_PAREN Expr . RIGHT_PAREN

    EQEQ         shift, and go to state 82
    GT           shift, and go to state 83
    LT           shift, and go to state 84
    LTEQ         shift, and go to state 85
    NE           shift, and go to state 86
    ANDAND       shift, and go to state 87
    PLUS         shift, and go to state 88
    MINUS        shift, and go to state 89
    MULT         shift, and go to state 90
    DIV          shift, and go to state 91
    OR           shift, and go to state 92
    RIGHT_PAREN  shift, and go to state 134


state 109

   56 Expr: PIPE Expr PIPE .

    $default  reduce using rule 56 (Expr)


state 110

   45 Expr: Expr . EQEQ Expr
   46     | Expr . GT Expr
   47     | Expr . LT Expr
   48     | Expr . LTEQ Expr
   49     | Expr . OR Expr
   50     | Expr . NE Expr
   51     | Expr . ANDAND Expr
   52     | Expr . PLUS Expr
   53     | Expr . MINUS Expr
   54     | Expr . MULT Expr
   55     | Expr . DIV Expr
   70 Value: VARNAME LEFT_BRACKET Expr . RIGHT_BRACKET

    EQEQ           shift, and go to state 82
    GT             shift, and go to state 83
    LT             shift, and go to state 84
    LTEQ           shift, and go to state 85
    NE             shift, and go to state 86
    ANDAND         shift, and go to state 87
    PLUS           shift, and go to state 88
    MINUS          shift, and go to state 89
    MULT           shift, and go to state 90
    DIV            shift, and go to state 91
    OR             shift, and go to state 92
    RIGHT_BRACKET  shift, and go to state 135


state 111

   60 Expr: LEFT_PAREN Expr RIGHT_PAREN .

    $default  reduce using rule 60 (Expr)


state 112

   45 Expr: Expr . EQEQ Expr
   45     | Expr EQEQ Expr .
   46     | Expr . GT Expr
   47     | Expr . LT Expr
   48     | Expr . LTEQ Expr
   49     | Expr . OR Expr
   50     | Expr . NE Expr
   51     | Expr . ANDAND Expr
   52     | Expr . PLUS Expr
   53     | Expr . MINUS Expr
   54     | Expr . MULT Expr
   55     | Expr . DIV Expr

    GT     shift, and go to state 83
    LT     shift, and go to state 84
    LTEQ   shift, and go to state 85
    PLUS   shift, and go to state 88
    MINUS  shift, and go to state 89
    MULT   shift, and go to state 90
    DIV    shift, and go to state 91
    OR     shift, and go to state 92

    $default  reduce using rule 45 (Expr)


state 113

   45 Expr: Expr . EQEQ Expr
   46     | Expr . GT Expr
   46     | Expr GT Expr .
   47     | Expr . LT Expr
   48     | Expr . LTEQ Expr
   49     | Expr . OR Expr
   50     | Expr . NE Expr
   51     | Expr . ANDAND Expr
   52     | Expr . PLUS Expr
   53     | Expr . MINUS Expr
   54     | Expr . MULT Expr
   55     | Expr . DIV Expr

    PLUS   shift, and go to state 88
    MINUS  shift, and go to state 89
    MULT   shift, and go to state 90
    DIV    shift, and go to state 91
    OR     shift, and go to state 92

    $default  reduce using rule 46 (Expr)


state 114

   45 Expr: Expr . EQEQ Expr
   46     | Expr . GT Expr
   47     | Expr . LT Expr
   47     | Expr LT Expr .
   48     | Expr . LTEQ Expr
   49     | Expr . OR Expr
   50     | Expr . NE Expr
   51     | Expr . ANDAND Expr
   52     | Expr . PLUS Expr
   53     | Expr . MINUS Expr
   54     | Expr . MULT Expr
   55     | Expr . DIV Expr

    PLUS   shift, and go to state 88
    MINUS  shift, and go to state 89
    MULT   shift, and go to state 90
    DIV    shift, and go to state 91
    OR     shift, and go to state 92

    $default  reduce using rule 47 (Expr)


state 115

   45 Expr: Expr . EQEQ Expr
   46     | Expr . GT Expr
   47     | Expr . LT Expr
   48     | Expr . LTEQ Expr
   48     | Expr LTEQ Expr .
   49     | Expr . OR Expr
   50     | Expr . NE Expr
   51     | Expr . ANDAND Expr
   52     | Expr . PLUS Expr
   53     | Expr . MINUS Expr
   54     | Expr . MULT Expr
   55     | Expr . DIV Expr

    PLUS   shift, and go to state 88
    MINUS  shift, and go to state 89
    MULT   shift, and go to state 90
    DIV    shift, and go to state 91
    OR     shift, and go to state 92

    $default  reduce using rule 48 (Expr)


state 116

   45 Expr: Expr . EQEQ Expr
   46     | Expr . GT Expr
   47     | Expr . LT Expr
   48     | Expr . LTEQ Expr
   49     | Expr . OR Expr
   50     | Expr . NE Expr
   50     | Expr NE Expr .
   51     | Expr . ANDAND Expr
   52     | Expr . PLUS Expr
   53     | Expr . MINUS Expr
   54     | Expr . MULT Expr
   55     | Expr . DIV Expr

    GT     shift, and go to state 83
    LT     shift, and go to state 84
    LTEQ   shift, and go to state 85
    PLUS   shift, and go to state 88
    MINUS  shift, and go to state 89
    MULT   shift, and go to state 90
    DIV    shift, and go to state 91
    OR     shift, and go to state 92

    $default  reduce using rule 50 (Expr)


state 117

   45 Expr: Expr . EQEQ Expr
   46     | Expr . GT Expr
   47     | Expr . LT Expr
   48     | Expr . LTEQ Expr
   49     | Expr . OR Expr
   50     | Expr . NE Expr
   51     | Expr . ANDAND Expr
   51     | Expr ANDAND Expr .
   52     | Expr . PLUS Expr
   53     | Expr . MINUS Expr
   54     | Expr . MULT Expr
   55     | Expr . DIV Expr

    EQEQ   shift, and go to state 82
    GT     shift, and go to state 83
    LT     shift, and go to state 84
    LTEQ   shift, and go to state 85
    NE     shift, and go to state 86
    PLUS   shift, and go to state 88
    MINUS  shift, and go to state 89
    MULT   shift, and go to state 90
    DIV    shift, and go to state 91
    OR     shift, and go to state 92

    $default  reduce using rule 51 (Expr)


state 118

   45 Expr: Expr . EQEQ Expr
   46     | Expr . GT Expr
   47     | Expr . LT Expr
   48     | Expr . LTEQ Expr
   49     | Expr . OR Expr
   50     | Expr . NE Expr
   51     | Expr . ANDAND Expr
   52     | Expr . PLUS Expr
   52     | Expr PLUS Expr .
   53     | Expr . MINUS Expr
   54     | Expr . MULT Expr
   55     | Expr . DIV Expr

    MULT  shift, and go to state 90
    DIV   shift, and go to state 91
    OR    shift, and go to state 92

    $default  reduce using rule 52 (Expr)


state 119

   45 Expr: Expr . EQEQ Expr
   46     | Expr . GT Expr
   47     | Expr . LT Expr
   48     | Expr . LTEQ Expr
   49     | Expr . OR Expr
   50     | Expr . NE Expr
   51     | Expr . ANDAND Expr
   52     | Expr . PLUS Expr
   53     | Expr . MINUS Expr
   53     | Expr MINUS Expr .
   54     | Expr . MULT Expr
   55     | Expr . DIV Expr

    MULT  shift, and go to state 90
    DIV   shift, and go to state 91
    OR    shift, and go to state 92

    $default  reduce using rule 53 (Expr)


state 120

   45 Expr: Expr . EQEQ Expr
   46     | Expr . GT Expr
   47     | Expr . LT Expr
   48     | Expr . LTEQ Expr
   49     | Expr . OR Expr
   50     | Expr . NE Expr
   51     | Expr . ANDAND Expr
   52     | Expr . PLUS Expr
   53     | Expr . MINUS Expr
   54     | Expr . MULT Expr
   54     | Expr MULT Expr .
   55     | Expr . DIV Expr

    OR  shift, and go to state 92

    $default  reduce using rule 54 (Expr)


state 121

   45 Expr: Expr . EQEQ Expr
   46     | Expr . GT Expr
   47     | Expr . LT Expr
   48     | Expr . LTEQ Expr
   49     | Expr . OR Expr
   50     | Expr . NE Expr
   51     | Expr . ANDAND Expr
   52     | Expr . PLUS Expr
   53     | Expr . MINUS Expr
   54     | Expr . MULT Expr
   55     | Expr . DIV Expr
   55     | Expr DIV Expr .

    OR  shift, and go to state 92

    $default  reduce using rule 55 (Expr)


state 122

   45 Expr: Expr . EQEQ Expr
   46     | Expr . GT Expr
   47     | Expr . LT Expr
   48     | Expr . LTEQ Expr
   49     | Expr . OR Expr
   49     | Expr OR Expr .
   50     | Expr . NE Expr
   51     | Expr . ANDAND Expr
   52     | Expr . PLUS Expr
   53     | Expr . MINUS Expr
   54     | Expr . MULT Expr
   55     | Expr . DIV Expr

    $default  reduce using rule 49 (Expr)


state 123

   33 IF_WHILE: WHILE LEFT_PAREN Expr RIGHT_PAREN . CodeBlock

    LEFT_BRACE  shift, and go to state 38

    CodeBlock  go to state 136


state 124

   26 Statement: XOR VARNAME EQ Expr . SEMI_COLON
   45 Expr: Expr . EQEQ Expr
   46     | Expr . GT Expr
   47     | Expr . LT Expr
   48     | Expr . LTEQ Expr
   49     | Expr . OR Expr
   50     | Expr . NE Expr
   51     | Expr . ANDAND Expr
   52     | Expr . PLUS Expr
   53     | Expr . MINUS Expr
   54     | Expr . MULT Expr
   55     | Expr . DIV Expr

    EQEQ        shift, and go to state 82
    GT          shift, and go to state 83
    LT          shift, and go to state 84
    LTEQ        shift, and go to state 85
    NE          shift, and go to state 86
    ANDAND      shift, and go to state 87
    PLUS        shift, and go to state 88
    MINUS       shift, and go to state 89
    MULT        shift, and go to state 90
    DIV         shift, and go to state 91
    OR          shift, and go to state 92
    SEMI_COLON  shift, and go to state 137


state 125

   43 ArrayIndex: LEFT_BRACKET Expr RIGHT_BRACKET .

    $default  reduce using rule 43 (ArrayIndex)


state 126

   24 Statement: VARNAME EQ VARNAME LEFT_PAREN . FuncCall RIGHT_PAREN SEMI_COLON
   25          | VARNAME EQ VARNAME LEFT_PAREN . RIGHT_PAREN SEMI_COLON

    NOT          shift, and go to state 48
    MINUS        shift, and go to state 49
    AND          shift, and go to state 50
    XOR          shift, and go to state 51
    PIPE         shift, and go to state 52
    TRUE         shift, and go to state 53
    FALSE        shift, and go to state 54
    NULLTOKEN    shift, and go to state 55
    VARNAME      shift, and go to state 56
    INT          shift, and go to state 57
    CHAR         shift, and go to state 58
    LEFT_PAREN   shift, and go to state 59
    RIGHT_PAREN  shift, and go to state 138

    FuncCall  go to state 139
    Expr      go to state 140
    Value     go to state 61


state 127

   22 Statement: VARNAME EQ STRING SEMI_COLON .

    $default  reduce using rule 22 (Statement)


state 128

   23 Statement: VARNAME EQ Expr SEMI_COLON .

    $default  reduce using rule 23 (Statement)


state 129

   21 Statement: VARNAME ArrayIndex EQ Expr . SEMI_COLON
   45 Expr: Expr . EQEQ Expr
   46     | Expr . GT Expr
   47     | Expr . LT Expr
   48     | Expr . LTEQ Expr
   49     | Expr . OR Expr
   50     | Expr . NE Expr
   51     | Expr . ANDAND Expr
   52     | Expr . PLUS Expr
   53     | Expr . MINUS Expr
   54     | Expr . MULT Expr
   55     | Expr . DIV Expr

    EQEQ        shift, and go to state 82
    GT          shift, and go to state 83
    LT          shift, and go to state 84
    LTEQ        shift, and go to state 85
    NE          shift, and go to state 86
    ANDAND      shift, and go to state 87
    PLUS        shift, and go to state 88
    MINUS       shift, and go to state 89
    MULT        shift, and go to state 90
    DIV         shift, and go to state 91
    OR          shift, and go to state 92
    SEMI_COLON  shift, and go to state 141


state 130

   34 CodeBlock: LEFT_BRACE VarDecs Statements RIGHT_BRACE .

    $default  reduce using rule 34 (CodeBlock)


state 131

   31 IF_WHILE: IF LEFT_PAREN Expr RIGHT_PAREN CodeBlock . ELSE CodeBlock
   32         | IF LEFT_PAREN Expr RIGHT_PAREN CodeBlock .

    ELSE  shift, and go to state 142

    $default  reduce using rule 32 (IF_WHILE)


state 132

   37 StringType: _STRING LEFT_BRACKET . INT RIGHT_BRACKET

    INT  shift, and go to state 143


state 133

   16 VarDec: VAR VAR_DEC_LHS COLON StringType SEMI_COLON .

    $default  reduce using rule 16 (VarDec)


state 134

   57 Expr: XOR LEFT_PAREN Expr RIGHT_PAREN .

    $default  reduce using rule 57 (Expr)


state 135

   70 Value: VARNAME LEFT_BRACKET Expr RIGHT_BRACKET .

    $default  reduce using rule 70 (Value)


state 136

   33 IF_WHILE: WHILE LEFT_PAREN Expr RIGHT_PAREN CodeBlock .

    $default  reduce using rule 33 (IF_WHILE)


state 137

   26 Statement: XOR VARNAME EQ Expr SEMI_COLON .

    $default  reduce using rule 26 (Statement)


state 138

   25 Statement: VARNAME EQ VARNAME LEFT_PAREN RIGHT_PAREN . SEMI_COLON

    SEMI_COLON  shift, and go to state 144


state 139

   24 Statement: VARNAME EQ VARNAME LEFT_PAREN FuncCall . RIGHT_PAREN SEMI_COLON

    RIGHT_PAREN  shift, and go to state 145


state 140

   29 FuncCall: Expr . COMMA FuncCall
   30         | Expr .
   45 Expr: Expr . EQEQ Expr
   46     | Expr . GT Expr
   47     | Expr . LT Expr
   48     | Expr . LTEQ Expr
   49     | Expr . OR Expr
   50     | Expr . NE Expr
   51     | Expr . ANDAND Expr
   52     | Expr . PLUS Expr
   53     | Expr . MINUS Expr
   54     | Expr . MULT Expr
   55     | Expr . DIV Expr

    EQEQ    shift, and go to state 82
    GT      shift, and go to state 83
    LT      shift, and go to state 84
    LTEQ    shift, and go to state 85
    NE      shift, and go to state 86
    ANDAND  shift, and go to state 87
    PLUS    shift, and go to state 88
    MINUS   shift, and go to state 89
    MULT    shift, and go to state 90
    DIV     shift, and go to state 91
    OR      shift, and go to state 92
    COMMA   shift, and go to state 146

    $default  reduce using rule 30 (FuncCall)


state 141

   21 Statement: VARNAME ArrayIndex EQ Expr SEMI_COLON .

    $default  reduce using rule 21 (Statement)


state 142

   31 IF_WHILE: IF LEFT_PAREN Expr RIGHT_PAREN CodeBlock ELSE . CodeBlock

    LEFT_BRACE  shift, and go to state 38

    CodeBlock  go to state 147


state 143

   37 StringType: _STRING LEFT_BRACKET INT . RIGHT_BRACKET

    RIGHT_BRACKET  shift, and go to state 148


state 144

   25 Statement: VARNAME EQ VARNAME LEFT_PAREN RIGHT_PAREN SEMI_COLON .

    $default  reduce using rule 25 (Statement)


state 145

   24 Statement: VARNAME EQ VARNAME LEFT_PAREN FuncCall RIGHT_PAREN . SEMI_COLON

    SEMI_COLON  shift, and go to state 149


state 146

   29 FuncCall: Expr COMMA . FuncCall

    NOT         shift, and go to state 48
    MINUS       shift, and go to state 49
    AND         shift, and go to state 50
    XOR         shift, and go to state 51
    PIPE        shift, and go to state 52
    TRUE        shift, and go to state 53
    FALSE       shift, and go to state 54
    NULLTOKEN   shift, and go to state 55
    VARNAME     shift, and go to state 56
    INT         shift, and go to state 57
    CHAR        shift, and go to state 58
    LEFT_PAREN  shift, and go to state 59

    FuncCall  go to state 150
    Expr      go to state 140
    Value     go to state 61


state 147

   31 IF_WHILE: IF LEFT_PAREN Expr RIGHT_PAREN CodeBlock ELSE CodeBlock .

    $default  reduce using rule 31 (IF_WHILE)


state 148

   37 StringType: _STRING LEFT_BRACKET INT RIGHT_BRACKET .

    $default  reduce using rule 37 (StringType)


state 149

   24 Statement: VARNAME EQ VARNAME LEFT_PAREN FuncCall RIGHT_PAREN SEMI_COLON .

    $default  reduce using rule 24 (Statement)


state 150

   29 FuncCall: Expr COMMA FuncCall .

    $default  reduce using rule 29 (FuncCall)
